# sources and settings (do modify)
HTTRACK_SVN=/temp/httrack-*
ICONV_TAR=/temp/android/libiconv-1.14.tar.gz
ANDROID_SDK=/home/${USER}/bin/android-ndk-r9d
TMP_DIR=/tmp/build_httrack_android
DEST_DIR=/tmp/arm-inst
# iconv cache builds
# rm -rf lib/*httrack* lib/libhtsjava.* &&
# tar cvfz iconv-android.tgz lib include
OPENSSL_BUILD=/temp/android/openssl-android.tgz
ICONV_BUILD=/temp/android/iconv-android.tgz
SAVE_BUILD=/temp/android/builds

# setup
objcopy=${ANDROID_SDK}/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/arm-linux-androideabi/bin/objcopy

# cleanup
rm -rf ${TMP_DIR} && cp -ax ${HTTRACK_SVN} ${TMP_DIR} && cd ${TMP_DIR}
rm -rf ${DEST_DIR}

# valid build cache ?
if test -n "$ICONV_BUILD"; then
if test -f "$ICONV_BUILD"; then
mkdir -p ${DEST_DIR}
cd ${DEST_DIR} || exit 1
tar xf "$ICONV_BUILD" || exit 1
else
ICONV_BUILD=
fi
fi
# openssl
if test -n "$OPENSSL_BUILD"; then
if test -f "$OPENSSL_BUILD"; then
mkdir -p ${DEST_DIR}
cd ${DEST_DIR} || exit 1
tar xf "$OPENSSL_BUILD" || exit 1
else
OPENSSL_BUILD=
fi
fi

# build iconv and openSSL ?
if ! test -n "$ICONV_BUILD"; then

# See <http://danilogiulianelli.blogspot.fr/2012/12/how-to-cross-compile-libiconv-for.html>
# wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz
cd ${TMP_DIR}
tar xf ${ICONV_TAR}
cd libiconv-1.14/

# patch iconv
cat << EOF | patch -p0
--- libcharset/lib/localcharset.c.orig  2011-02-28 23:43:35.000000000 +0100
+++ libcharset/lib/localcharset.c       2013-08-05 19:45:19.736877834 +0200
@@ -45,7 +45,7 @@
 # endif
 #endif

-#if !defined WIN32_NATIVE
+#if !defined(WIN32_NATIVE) && !defined(__ANDROID__)
 # include <unistd.h>
 # if HAVE_LANGINFO_CODESET
 #  include <langinfo.h>
@@ -361,7 +361,7 @@
   const char *codeset;
   const char *aliases;

-#if !(defined WIN32_NATIVE || defined OS2)
+#if !(defined WIN32_NATIVE || defined OS2 || defined __ANDROID__)

 # if HAVE_LANGINFO_CODESET
EOF

# create bootsrrap config.h
./configure -host=arm-none-linux \
 --enable-shared --disable-static \
 --with-sysroot=${ANDROID_SDK}/platforms/android-5/arch-arm \
 --with-zlib=${ANDROID_SDK}/platforms/android-5/arch-arm/usr \
 --includedir=${ANDROID_SDK}/platforms/android-5/arch-arm/usr/include \
CC="${ANDROID_SDK}/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc --sysroot=${ANDROID_SDK}/platforms/android-5/arch-arm -I${ANDROID_SDK}/platforms/android-5/arch-arm/usr/include -L${ANDROID_SDK}/platforms/android-5/arch-arm/usr/lib"

# create Android mk
mkdir jni
cat << EOF > jni/Android.mk
LOCAL_PATH := \$(call my-dir)
include \$(CLEAR_VARS)
TARGET_ARCH_ABI := armeabi-v7a
LOCAL_MODULE    := iconv
LOCAL_CFLAGS    := \
    -O3 -g3 \
    -funwind-tables \
    -Wl,--no-merge-exidx-entries \
    -Wno-multichar \
    -D_ANDROID \
    -DLIBDIR="\"c\"" \
    -DLIBICONV_PLUG
LOCAL_C_INCLUDES := \
    .. \
    ../include \
    ../lib \
    ../libcharset/include
LOCAL_SRC_FILES := \
    ../lib/iconv.c \
    ../lib/relocatable.c \
    ../libcharset/lib/localcharset.c
include \$(BUILD_SHARED_LIBRARY)
EOF

# build libiconv
cd jni
${ANDROID_SDK}/ndk-build V=1 || exit 1
cd ..
mkdir -p ${DEST_DIR}/lib ${DEST_DIR}/include
cp -ax obj/local/armeabi/libiconv.so ${DEST_DIR}/lib || exit 1
cp -ax include/iconv.h ${DEST_DIR}/include || exit 1

else
echo "using pre-build iconv binaries"
fi

# build openSSL
# Thanks to the Guardian Project <http://guardianproject.info/> for the help
if ! test -n "$OPENSSL_BUILD"; then
git clone https://github.com/guardianproject/openssl-android.git
cd openssl-android/
${ANDROID_SDK}/ndk-build
cp -ax libs/armeabi/libssl.so libs/armeabi/libcrypto.so ${DEST_DIR}/lib || exit 1
cp -ax include/openssl ${DEST_DIR}/include || exit 1
cd ..

else
echo "using pre-build openssl binaries"
fi

# build httrack
# no more --disable-https
cd ${TMP_DIR}
./configure -host=arm-none-linux \
 --prefix=${DEST_DIR} \
 --enable-shared --disable-static \
 --with-sysroot=${ANDROID_SDK}/platforms/android-5/arch-arm \
 --with-zlib=${ANDROID_SDK}/platforms/android-5/arch-arm/usr \
 --includedir=${ANDROID_SDK}/platforms/android-5/arch-arm/usr/include \
 CC="${ANDROID_SDK}/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc --sysroot=${ANDROID_SDK}/platforms/android-5/arch-arm -I${ANDROID_SDK}/platforms/android-5/arch-arm/usr/include -L${ANDROID_SDK}/platforms/android-5/arch-arm/usr/lib" \
 CFLAGS="-O3 -g3 -funwind-tables -Wl,--no-merge-exidx-entries -DANDROID -D_ANDROID -DLIBICONV_PLUG -DHTS_CRASH_TEST -I${DEST_DIR}/include -L${DEST_DIR}/lib" \
 LDFLAGS="-Wl,-O1" \
 && sed -i -e 's/CPPFLAGS = .*/CPPFLAGS =/' Makefile \
 && sed -i -e 's/CPPFLAGS = .*/CPPFLAGS =/' src/Makefile \
 && find . -name Makefile -exec sed -i -e "s/\(.*LDFLAGS = \)-version-info .*/\1 -avoid-version/" {} \; \
 && make -j8 && make install DESTDIR=${DEST_DIR} \
 && make install

# split debugging information so that we can addr2line later
# example: 
# arm-linux-androideabi-addr2line -C -f -e libhttrack.so 00066c78
(
cd ${DEST_DIR}/lib
if test -n "$SAVE_BUILD"; then
	md5="$(md5sum libhttrack.so  | cut -f1 -d' ')"
	dest="${SAVE_BUILD}/${md5}"
	mkdir -p "$dest"
	echo "$md5" > libhttrack.so.md5.txt
fi
for i in libhttrack libhtsjava libiconv ; do
	${objcopy} --only-keep-debug ${i}.so ${i}.dbg
	${objcopy} --strip-debug ${i}.so
	${objcopy} --remove-section .gnu_debuglink ${i}.so
	${objcopy} --add-gnu-debuglink=${i}.dbg ${i}.so
	if test -n "$SAVE_BUILD"; then
		cp -ax ${i}.* "${dest}/"
	fi
done
rm *.la
rm -rf httrack
)
